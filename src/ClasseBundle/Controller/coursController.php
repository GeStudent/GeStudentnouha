<?php

namespace ClasseBundle\Controller;
use Symfony\Component\HttpFoundation\File\File;

use Symfony\Component\DependencyInjection\ContainerInterface;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use ClasseBundle\Entity\cours;
use AppBundle\Service\FileUploader;
//use ClasseBundle\tests\UploadedFile;
use ClasseBundle\Form\coursType;
use Symfony\Component\HttpFoundation\File\Exception\FileException;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;
use AppBundle\Repository\coursRepository;


class coursController extends Controller
{
    /**
     * @Route("/cours/new", name="app_cours_new")
     */
    function AjoutCoursAction(Request $request)
    {

        $Cours = new cours();

        $Form = $this->createForm(coursType::class, $Cours)->handleRequest($request);
        if ($Form->isValid()) {


            // $file stores the uploaded PDF file
            /** @var Symfony\Component\HttpFoundation\File\UploadedFile $file */
            $file = $Cours->getBrochureFilename();

            $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();

            // Move the file to the directory where brochures are stored
            $file->move(
                $this->getParameter('brochures_directory'),
                $fileName
            );

            // Update the 'brochure' property to store the PDF file name
            // instead of its contents
            $Cours->setBrochureFilename($fileName);

            $em = $this->getDoctrine()->getManager();

            $em->persist($Cours);
            $em->flush();

            return $this->redirect($this->generateUrl('Listcour'));
        }
        // return $this->render('@Classe/cours/AjoutCours.html.twig', array('form' => $Form->createView()));
        return $this->render('@Classe/cours/AjoutCours.html.twig', [
            'form' => $Form->createView(),
        ]);

    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    public function ListCoursAction()
    {
        $em = $this->getDoctrine()->getManager();
        $cours = $em->getRepository(cours::class)->findAll();
        return $this->render('@Classe/cours/ListCours.html.twig', array('cours' => $cours));
        // ma3mltech affectation bin cours w class ?aamlet hedhi taffichi le s cours el kol ey hedhi taffichi les cours elkol 7achit ken be cours mta3 class
    }

    public function ListrechercheAction(Request $request, $id)
    {
        $em = $this->getDoctrine()->getManager();
        $cours = $this->getDoctrine()->getRepository(cours::class)->findBy(array('id' => $id));
        return $this->render('@Classe/cours/Listrech.html.twig', array('cours' => $cours));
    }


    // }


    public function deleteCoursAction(Request $request, $Id)
    {
        $Cours = new cours();
        $em = $this->getDoctrine()->getManager();
        $Cours = $em->getRepository(cours::class)->find($Id);
        $em->remove($Cours);
        $em->flush();
        return $this->redirect($this->generateUrl('Listcour'));


    }

    Public function UpdateCourAction(Request $request, $Id)
    {
        $em = $this->getDoctrine()->getManager();
        $Cours = $em->getRepository(cours::class)->find($Id);
        $Form = $this->createForm(coursType::class, $Cours)->handleRequest($request);
        if ($Form->isSubmitted()) {


            $em->persist($Cours);
            $em->flush();
            return $this->redirect($this->generateUrl('Listcour'));
        }
        return $this->render('@Classe/cours/UpdateCours.html.twig', array('form' => $Form->createView()));


    }


    /**
     * Creates a new ActionItem cours.
     *
     * @Route("/search", name="ajax_search")
     * @Method("GET")
     */
    public function searchAction(Request $request)
    {
        $em = $this->getDoctrine()->getManager();

        $requestString = $request->get('q');

        $entities = $em->getRepository('ClasseBundle:cours')->findEntitiesByString($requestString);

        if (!$entities) {
            $result['entities']['error'] = "Cours Not found!";
        } else {
            $result['entities'] = $this->getRealEntities($entities);
        }

        return new Response(json_encode($result));
    }

    public function getRealEntities($entities)
    {

        foreach ($entities as $cours) {
            $realEntities[$cours->getId()] = $cours->getName();


        }

        return $realEntities;
    }


    public function ListCourMobileAction()
    {
        $em = $this->getDoctrine()->getManager();
        $query = $em->createQuery(
            'SELECT c
        FROM ClasseBundle:cours c '
        );
        $cours = $query->getArrayResult();

        $response = new Response(json_encode($cours));
        $response->headers->set('Content-Type', 'application/json');

        return $response;
    }


    public function AddCourMobileAction(Request $request)
    {

        $nom = $request->query->get('name');
        $lesson = $request->query->get('lesson');
        $duration = $request->query->get('duration');


        $Cours = new cours();
        $Cours->setName($nom);
        $Cours->setLesson($lesson);
        $Cours->setDuration($duration);

        $em = $this->getDoctrine()->getManager();


        try {
            $em->persist($Cours);
            $em->flush();

        } catch (\Exception $ex) {
            $data = [
                'title' => 'validation error',
                'message' => 'Some thing went Wrong',
                'errors' => $ex->getMessage()
            ];
            $response = new JsonResponse($data, 400);
            return $response;
        }

        return $this->json(array('title' => 'successful', 'message' => "Cours added successfully"), 200);


    }


    public function deleteCourMobileAction(Request $request)
    {
        $id = $request->query->get('id');
        $Cours = $this->getDoctrine()->getRepository('ClasseBundle:cours')->findOneById($id);
        if ($Cours) {
            $em = $this->getDoctrine()->getManager();
            $em->remove($Cours);
            $em->flush();
            $response = array("body" => "Cours delete");
        } else {
            $response = array("body" => "Error");
        }
        return new JsonResponse($response);
    }


    public function EditCourMobileAction(Request $request)
    {

        $id = $request->query->get('id');
        $em = $this->getDoctrine()->getManager();
        $Cours = $em->getRepository(cours::class)->find($id);
        $name = $request->query->get('name');
        $lesson = $request->query->get('lesson');
        $duration = $request->query->get('duration');
        $Cours->setName($name);
        $Cours->setLesson($lesson);
        $Cours->setDuration($duration);
        try {
            $em->persist($Cours);
            $em->flush();
        } catch (\Exception $ex) {
            $data = [
                'title' => 'validation error',
                'message' => 'Some thing went Wrong',
                'errors' => $ex->getMessage()
            ];
            $response = new JsonResponse($data, 400);
            return $response;
        }
        return $this->json(array('title' => 'successful', 'message' => "Cours Edited successfully"), 200);
    }









}




